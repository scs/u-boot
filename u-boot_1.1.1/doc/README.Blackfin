		Release Notes for u-boot_1.1.1-Beta_1 Release + Bug Fixes
                ---------------------------------------------------------

IMP NOTE:
--------
        Current cvs version is not completely tested and may not be stable.
        Testing is in progress.
        For the stable u-boot version get the previous tagged cvs version.

Find these sections in this Release Notes,

	Version
	Development Environment
	Deliverables
	Fixes in Beta2
	Known Issues
	Improvements
	Commands supported
	Build Procedure
		Downloading prebuilt . boot loader images
		Building boot loader source code
		Building Linux image (compressed and uncompressed) that shall be used with bootm command
	Flashing the bootloader 
		Flashing into the Board with bootloader
		Flashing into the Board without bootloader
	Loading Linux to Target Board
	Miscellaneous
	VDSP executable support
	Different VCO frequency support
	Precautions
	HOWTO (Help on testing selected commands)
	U-Boot Memory map
	Report Bugs

Version
-------

	u-boot_1.1.1-Beta_1
	Date: 08 Sept 2004

Development Environment
-----------------------

	Tool chain: 3.4.x Blackfin Toolchain
	Host platform: Red hat Linux 9.0
	Target board: STAMP Board/ EZKIT board

	Note: However other similar host platforms (SuSe Linux) are also supported.
	But currently they are not tested


Deliverables
------------

	Source can be checked out from following location,
	http://cvs.blackfin.uclinux.org/cgi-bin/cvsweb.cgi/?cvsroot=uboot533
		
Fixes 
-----
	1. Flash programming in STAMP board takes a very long time.  Around 0x90000 bytes copying takes around 10-15 minutes.
		- This issue is fixed.

	2. On the ezkit board, if any flash location is reflashed without erasure, it causes the flash to behave inconsistent. 		 Only way to continue flash operations is by resetting the board and erasing the locations.
		- This issue is fixed.
	
	3. Clock varies with standard seconds.
		- This issue is fixed
	
	
Known Issues
-------------
1. There are some issues in booting the Kernel image from the compactflash when the System clock is changed.
      
Improvements 
-------------     

	1. VDSP executable support.
	2. Different VCO frequency support.
	3. sleep command support.
	4. Booting From Compact Flash Support in Stamp board
		(For further information see section "Loading Linux to Target
Board"

Commands supported
-------------------

	1. go      - start application at address 'addr'
	2. run     - run commands in an environment variable
	3. bootm   - boot application image from memory
	4. tftpboot- boot image via network using TFTP protocol
	5. date    - to set and display date
	6. loadb   - load binary file over serial line (kermit mode)
	7. md      - memory display
	8. mm      - memory modify
	9. mw      - memory write
	10. cp      - memory copy
	11. cmp     - memory compare
	12. crc32   - checksum calculation
	13. base    - print or set address offset
	14. printenv- print environment variables
	15. setenv  - set environment variables
	16. saveenv - save environment variables to persistent storage
	17. erase   - erase FLASH memory
	18. flinfo  - print FLASH memory information
	19. bdinfo  - print Board Info structure
	20. iminfo  - print header information for application image
	21. echo    - echo args to console
	22. version - print monitor version
	23. help    - print online help
	24. ?       - alias for 'help'
	25. autoscr - running a script file, used for automated testing of commands
	26. sleep	- for delay.

Following options are supported for setenv command:

	bootdelay: 	See CONFIG_BOOTDELAY.
	bootcmd: 	See CONFIG_BOOTCOMMAND.
	bootfile:  	Name of the image to load with TFTP.
	autoload: 	If set to "no" (any string beginning with 'n'),  "tftp" will just load perform a lookup of the 
			configuration from the BOOTP server, but not try toload any image using TFTP.
	autostart:	If set to "yes", an image loaded using the "tftpboot" or "dhcp" commands will be automatically started			      (by internally calling "bootm"). If set to "no", a stand-alone image will be passed to the "bootm" 
			command. This will be copied to the load address (and eventually uncompressed). But executing the 
			Linux image wouldn.t be started.  This can be used to load and uncompress arbitrary data.
	ipaddr:		IP address. This is needed for tftpboot command.
	loadaddr:	Default load address for commands like "tftpboot", "loadb".
	serverip:	TFTP server IP address; needed for tftpboot command.

Build Procedure
----------------

Downloading prebuilt - boot loader images
------------------------------------------

	1. Download u-boot_1.1.1-Images-Beta.tar.bz2 from http://blackfin.uclinux.org/frs/?group_id=20

	2. Untar bun zip file
		$ bunzip2 u-boot_1.1.1-Images-Beta.tar.bz2 
		$ tar -xvf u-boot_1.1.1-Images-Beta.tar 

	3. Find the following images, after untaring.

			linux-ezkit.bin - bin file of the kernel for ezkit board (used with go command)
			linux-stamp.bin - bin file of the kernel for stamp board (used with go command)
			u-boot-ezkit.bin - boot loader to be programmed to the flash for ezkit
			u-boot-stamp.bin - boot loader to be programmed to the flash for stamp
			uImage-ezkit - uboot standard kernel image for ezkit board (used with bootm command)
			linux-ezkit.dxe - elf file of the kernel for ezkit (used with bootelf command)
			linux-stamp.dxe - elf file of the kernel for stamp (used with bootelf command)
			u-boot-ezkit.dxe - To be used initally for flash programming (ezkit board)
			u-boot-stamp.dxe  - To be used initally for flash programming (stamp board)
			uImage-stamp - uboot standard kernel image for stamp board (used with bootm command)
			mkimage - Used to create u-boot standard images

	Note: These images can be used in case you don.t have the source for kernel or bootloader.

bUilding boot loader source code
--------------------------------

	1. source can be obtained by checking out the u-boot_1.1.1 from 
	http://cvs.blackfin.uclinux.org/cgi-bin/cvsweb.cgi/?cvsroot=uboot533
	by giving following command

		$ cvs -z3 -d:ext:anonymous@cvs.blackfin.uclinux.org:/cvsroot/uboot533 co modulename

	2. Execute following commands,
		$ make clean 
		$ make mrproper 
		$ make stamp_config 
	Note: make ezkit533_config in case of EZKIT board.
		$ make

	3. u-boot.bin obtained from "make" will be used to flash on to the target board.

Building Linux image (compressed and uncompressed) 
(This Image Will be Used in bootm command)

	Linux ELF image has to be changed as per u-boot standards to load Linux using bootm command. Following subsections 
	explain how to build compressed and uncompressed Linux images.

	Building Compressed Linux Image

	1. Generate the binary file from the ELF file, using following command depending on the board type

	For STAMP board,
		$ bfin-elf-objcopy -O binary linux-stamp.dxe linux-stamp.bin
	For EZ-KIT board,
		$ bfin-elf-objcopy -O binary linux-ezkit.dxe linux-ezkit.bin

	2.	Compress the binary file obtained above, using following command depending on the board type.
	
	For STAMP board,
		$ gzip -9 linux-stamp.bin	
	For EZ-KIT board,
		$ gzip -9 linux-ezkit.bin

	3.	Build the final linux final image, using following command depending on the board type.
	
	For STAMP board,
		$ ./tools/mkimage -A blackfin -O uclinux -T kernel -C gzip -a 0x1000 
		-e 0x1000 -n "Bfin uClinux Kernel" -d linux-stamp.bin.gz uImage-stamp

	For EZ-KIT board,
		$ ./tools/mkimage -A blackfin -O uclinux -T kernel -C gzip -a 0x1000 
		-e 0x1000 -n "Bfin uClinux Kernel" -d linux-ezkit.bin.gz uImage-ezkit

	Note: Use the utility mkimage present in the u-boot_1.1.1/tools directory to merge the header information like Image 
	Name, Image Type, Data Size, Load Address, Entry Point into the linux-stamp.bin.gz.

	Building uncompressed Linux image

	Use following commands to build uncompressed Linux image, depending on the board type
	
	For STAMP board
		$ ./tools/mkimage -A blackfin -O uclinux -T kernel -C none -a 0x1000
		-e 0x1000 -n "Bfin uClinux kernel" -d linux-stamp.dxe uImage-stamp
	For EZKIT board
		$ ./tools/mkimage -A blackfin -O uclinux -T kernel -C none -a 0x1000
		-e 0x1000 -n "Bfin uClinux kernel" -d linux-stamp.dxe uImage-stamp

	Note: 0x1000 is used because we have compiled the kernel with that location as the entry point. If anyone wants to
	chose a different address for entry point (for eg, 0x20000), then please give that address instead of 0x1000. Ensure 
	to change the entry point of the kernel.

Flashing the bootloader
-----------------------
	Ensure following settings in the host system,

	Ensure dhcpd server and tftp server are running on the host.
		dhcpd.conf on the HOST should look something similar to the given below,
			ddns-update-style ad-hoc;
			allow bootp;
			subnet x.y.z.0 netmask 255.255.255.0 {
				default-lease-time 122209600;
				max-lease-time 31557600;
				group {
				host bf533 {
					hardware ethernet 02:80:ad:20:31:b8;
					fixed-address x.y.z.m;
					filename "u-boot.bin";
					}
				}
			}
	Ensure to have the image for download in the /tftpboot of the HOST.

	Ensure c-kermit is setup on the host with the following configuration of .kermrc
		$ set line /dev/ttyS0
		$ set speed 57600
		$ set carrier-watch off
		$ set handshake none
		$ set flow-control none
		$ robust
		$ set file type bin
		$ set file name lit
		$ set rec pack 1000
		$ set send pack 1000
		$ set window 5

	Flashing mechanism varies depending on whether the board already contains the U-Boot bootloader or not. Two flashing approaches are described in the following sections, for the two types of boards, board with bootloader and board without bootloader.

Flashing into the Board with bootloader
---------------------------------------

	Following approach shall be used if the board is already having the bootloader and needs to upgrade to a new version of the bootloader.

	Caution:

	After erasing the flash, make sure to copy new bootloader to the flash.
	If board is reset without "copy to flash operation", bootloader in flash will be lost permanently and could render hardware inoperable till `the bootloader is restored through other methods.

	1. Start kermit with 'kermit -c' option
	2. Boot the u-boot present in the EZKIT/STAMP board and wait for the prompt to appear.
	3. Once the u-boot prompt appears execute following commands,

	BOOT> set ipaddr x.y.z.m
	Note: Assign an ipaddress for the target board

	BOOT> set serverip x.y.z.n
	Note: Set the ipaddress of the host machine. Here host machine shall contain the u-boot.bin

	4. Now new bootloader can be flashed either in "network mode" or in "serial mode".

Network Mode:

	a) Execute following commands
		
		BOOT> tftp 0x1000000 u-boot.bin

	Note: Transfers the u-boot.bin from the host machine /tftpboot folder to the SDRAM location 0x1000000. Make sure that the size of the bootloader displayed is noted and say it is <size>. In case there is "Invalid RARP" Error message, please ignore the same and proceed further.
				
		BOOT> erase all
	Note: Please note that this command will erase the complete flash.

		BOOT> cp.b 0x1000000 0x20000000 <size + 1>
	Note: Copy the u-boot.bin from the SDRAM 0x1000000 address to the Flash 0x20000000 address

		BOOT> cmp.b 0x1000000 0x20000000 <size + 1>
	Note: This command shall display "Total of <size + 1> bytes were the same" message. If you don't get this message, there is something is wrong and try to load bootloader to SDRAM  and copy to flash one more time, without reset

		b) Wait for the copy operation to be complete.

		c) Change BMODE pins to 00. 
		
		d) Restart the EZKIT/STAMP board by pressing the reset button.

Serial mode:

		Note: Ensure u-boot.bin shall be in the same folder of kermit folder
 
		a) Execute following commands
		
		BOOT> loadb
		BOOT> <CTRL+\C>
	Note: Type cntl \C to go to c-kermit prompt  

                  c-kermit> send u-boot.bin
			c-kermit> connect
			Note: 'connect' takes control back to the bootloader prompt
			Make sure that the size of the bootloader displayed is noted 
			and say it is <size>.
			
		BOOT> erase all
	Note: Please note that this command will erase the complete flash.
			
		BOOT> cp.b 0x1000000 0x20000000 <size + 1>
	Note: Copy the u-boot.bin from the SDRAM 0x1000000 address to the Flash 0x20000000 address

		BOOT> cmp.b 0x1000000 0x20000000 <size + 1>
	Note: This command shall display "Total of <size + 1> bytes were the same" message. If you don't get this message, there is something is wrong and try to load bootloader to SDRAM  and copy to flash one more time, without reset)

		b) Wait for the copy operation to be complete.
		
		c) Change BMODE pins to 00. 
				
		d) Restart the EZKIT/STAMP board by pressing the reset button.

Flashing into the Board without bootloader
------------------------------------------

	Note:  This approach is used while flashing the u-boot first time which is normally done by board manufacturer. One of the method currently followed in the absence of a flash programming utility is loading through VDSP in the following way, 

	1. Launch VDSP.  Ensure that "Reset before loading" field is NOT checked under "Target Options" of VDSP++.  

	2. Initialize the SDRAM manually by setting the EBIU registers from VDSP, with following settings depending on board type
		(EBIU register window can be opened using the menu and selecting "Registers->ADSP-BF533 Extended Registers->External Bus Interface Unit.)

	For STAMP:	
		EBIU_SDGCTL = 0x00911149 
		EBIU_SDBCTL = 0x0037 	 
		EBIU_SDRRC  = 0x0305 
	For EZKIT: 	
		EBIU_SDGCTL = 0x0091998D
		EBIU_SDBCTL = 0x0013
		EBIU_SDRRC  = 0x817

	3. Load the u-boot-stamp.dxe or u-boot-ezkit.dxe (depending on the board), which was obtained in "Build Procedure step", using following steps.

		a. Set the Program Counter (PC) to 0x1800000 (ezkit) OR 0x7000000(stamp) using    Registers->PC Counters.
		b. Execute the Program u-boot.dxe by Debug->Run
		c. Once the u-boot prompt appears, type loadb.
		d. Type cntl \C to go to c-kermit>
		e. Type, "send u-boot.bin". This file is obtained from "Build Procedure" section.
		f. Type "connect"
		g. This will get you back to u-boot prompt.

	4. Flash boot loader using following commands,

		a. At the u-boot prompt, type "erase all" to erase all the sectors of the Flash.
		b. Flash u-boot-stamp.bin (or u-boot-ezkit.bin)
		BOOT> cp.b 0x1000000 0x20000000 0x20000
	
	Note: Please wait till the operation is complete. Flash write takes a long time on stamp In case of STAMP, D5 LED glows to indicate flash programming is in progress).

	5. Change the BMODE pins to 00.Reset the board and wait for the u-boot prompt to appear.
	Note: In case if you are using EZKIT board without BMODE pin jumpers, launch VDSP and set the PC to 0x20000000, and run.


Loading Linux to Target Board
-------------------------------

	Following two methods can be used to load Linux image onto Target Board and then to execute.

	Serial boot:
		1.	Use c-kermit as the terminal emulation program.
		2.	Use following command to start loading process.
			BOOT> loadb 0x1000000

		3.	Press <Ctrl>\c to go to c-kermit> prompt.
		4.	Type following command at c-kermit prompt 
			c-kermit> send linux-stamp.dxe 
			Note: linux-ezkit.dxe in case of EZKIT board
			c-kermit> connect
		5.	Start kernel using,
			BOOT> bootelf 0x1000000

	Network boot:

		1.	Ensure dhcpd server and tftp server are running on the host.
			dhcpd.conf on the HOST should look something similar to the given below,

				ddns-update-style ad-hoc;
				allow bootp;
				subnet 10.100.4.0 netmask 255.255.255.0 {
				default-lease-time 122209600;
				max-lease-time 31557600;
				group   {
				host bf533      {
				hardware ethernet 02:80:ad:20:31:b8;
				fixed-address 10.100.4.50;
				filename "linux.dxe";
				}
				}
				}
		2.	Ensure to have the image for download in the /tftpboot of the HOST.
		3.	Configure IP addresses of Host and Target board by giving following commands

			BOOT> setenv serverip x.y.z.m
			BOOT> setenv ipaddress x.y.z.n
			Where x.y.z.m is Host IP address and x.y.z.n is Target board IP address.

		4.	 Download Linux image

			BOOT> tftp 0x1000000 linux-stamp.dxe 

			Note: In case if you are using ezkit board use linux-ezkit.dxe in the above command instead of 
			linux-stamp.dxe start Linux using following command

			BOOT> bootelf 0x1000000

	Compact Flash Boot:


		1. Connect Compact Flash to Windows using CF to USB Adapter

		2. If CF is already formated in FAT file system go to step3, Otherwise
			format CF with FAT file system.

		3. Copy latest uImage-stamp from windows to root folder of CF.
			Note: Boot loader identifies only image with "uImage-stamp"

		4. Insert CF to STAMP+EZ_LAN board.

		Note: EZ_LAN card shall be modifed, in such a way that
		LC*244 first pin shall connect to stamp board EXP_AMS2 pin.
         
		5. PowerCycle the Board.

		Note: PowerCycle is important, so that CF card configures to TRUE IDE mode.
		Also note that only first time when CF card is inserted PowerCycle is
		important, from there onwards reset can be used to reset the board till CF 
		is removed.
   
		6. Now Bootloader boots Linux Image from the CF. This can be Observed.

		Notes: 
			Only following commands with the respective options
			are used and tested to boot linux from Compact flash. 
	
	
			fat load
			ide init
			ide read
			
			However to enable booting from CF, IDE and FAT commands are enabled,
			inturn enabled following commands
	
			fatinfo
			fatls
			fatload
			diskboot
			ide
				
			Apart form the "fat load" "ide Init" "ide read", Other commands "Most
			probably might work".  As all of the above commands are "Not in Scope" 
			they are NOT unit tested.
  
Miscellaneous
--------------

VDSP Executable Support
------------------------

	U-Boot Alpha-2 
	--------------
		Following steps shall be followed with u-boot alpha-2 version

	1. Download the following examples provided from,
	   http://blackfin.uclinux.org/frs/?group_id=20
		a. UART Program, On both STAMP and EZKIT boards
		b. BLINK Program, On EZKIT board only.

	2. Unzip the zip files, BLINK.zip and UART.zip in a folder say .C:\VDSP-Support\. on the VDSP installed 
	   windows machine.

	3. Open C-Kermit or HyperTerminal with baud rate 57600.

	4. Launch VDSP and manually configure the SDRAM, with following settings.

		For EZKIT:
			EBIU_SDGCTL: 0x0091998D
			EBIU_SDBCTL: 0x0013
			EBIU_SDRRC: 0x0817
		For STAMP:
			EBIU_SDGCTL: 0x00911149
			EBIU_SDBCTL: 0x0037
			EBIU_SDRRC: 0x0305

	5. Using .Project->open->. menu select the project 
	   C:\VDSP-Support\UART\UART RS-232 HyperTerminal session\uart.dpj.

	6. Set the PC to 0x1000.
	7. Build the Project and Run.
	8. Check for the Output. This output should be same with the output that is displayed when the same UART.dxe 
	   is executed using bootelf command of u-boot.
	9. Open the folder .C:\VDSP-Support\UART\UART RS-232 HyperTerminal session\Debug. and copy the uart.dxe to Linux host 		 /tftpboot.
	10. Execute the Bootloader, using following commands,
		BOOT> tftp 0x1000000 uart.dxe
		BOOT> bootelf 0x1000000
	11. Output should be same as seen in step 8.

	Pre-Requisites: The VDSP programs should be compiled with SDRAM address only. Currently it has been chosen to 
	compiled and execute at 0x1000.

	U-Boot from Current CVS:
	-----------------------
		In case u-boot is compiled from current cvs following method shall be followed

	1. Open Any VDSP application through VDSP toolkit.
	
	2. Add linker file

	3. Make sure in the linker file, program section should start from 0xFFA00000

	4. Make sure in the linker file, any section doesn't overlap with u-boot memory map.
	  (Can be found at the end of this readme)

	5. Compile and generate dxe 

        6. Execute the application in bootloader using following commands
		BOOT> tftp 0x1000000 <application>.dxe
		BOOT> bootelf 0x1000000

Different VCO frequency support:
---------------------------------

	1. Edit the files .include/configs/ezkit533.h. or .include/configs/stamp.h.

		a. Change the line CONFIG_VCO to any value between 250 - 590.
		b. Compile and form the u-boot.bin
		c. This u-boot.bin would run at the VCO specified in 
		   include/configs/ezkit533.h or include/configs/stamp.h

Precautions
-----------

		1. Since protection on Flash locations is not available, please ensure 0x20070000 - 0x2007ffff is not erased. Those locations contain environment variables.
		   Bootloader 0x20000000 - 0x2005ffff is reserved for bootloader.

		2. Please ensure nothing is downloaded to location 0x0 - 0x50.
		   Some of these locations are being used up by the bootloader.

HOWTO (Help on testing selected commands)
-----------------------------------------

	1. bootm

		BOOT> tftp 0x1000000 uImage-stamp (OR) tftp 0x1000000 uImage-ezkit
		BOOT> bootm 0x1000000
		Kernel prompt can be seen.

	2. iminfo

		BOOT> tftp 0x1000000 uImage-stamp (OR) tftp 0x1000000 uImage-ezkit
		BOOT> iminfo 0x1000000
		Details of the image downloaded can be Seen.

	3. go
		a. Build linux-stamp.bin or linux-ezkit.bin as follows, depending on the target board,

		For STAMP,
			$ bfin-elf-objcopy -O binary linux-stamp.dxe linux-stamp.bin 
		For EZKIT,
			$ bfin-elf-objcopy -O binary linux-ezkit.dxe linux-ezkit.bin 

		b. Give following command at BOOT prompt

			BOOT> tftp 0x1000 linux-stamp.bin OR tftp 0x1000 linux-ezkit.bin
			BOOT> go 0x1000
			
			Note: Entry point address of kernel should only be used as the load address 
			in case of using go command for kernel image boot.

			Kernel prompt can be seen

	4. autoboot (OR)  How to make a standalone system (Flash Boot)
	a. Execute following commands at BOOT prompt
		BOOT> setenv bootdelay 30
		BOOT> saveenv
		BOOT> tftp 0x1000000 uImage-stamp
		BOOT> erase 0x20100000 0x2020FFFF
		BOOT> cp.b 0x1000000 0x20100000 0xXXXX (where, 0xXXXX is size of uImage-stamp) 
		(Note: In case of EZKIT board uImage-ezkit)
		BOOT> setenv linuxrun bootm 0x20100000
		BOOT> setenv bootcmd linuxrun
		BOOT> saveenv
	b. Reset the board.
	c. u-boot waits for a delay of 30 seconds for the user to type any character inorder to display the prompt. 
	   If the user does not press any key u-boot automatically takes the command configured for autoboot, 
	   which in this case is "linuxrun" and executes the same.

	   Kernel prompt can be seen.

	5. autoscr
		a. Execute following commands on the host,
			i. Write the commands (for eg, "echo hi" etc) to a file, say test.script
			ii. Build uncompressed image

		b. To test on STAMP board use following command
			$ mkimage -A blackfin -O uClinux -T script -C none -a 0x5000000 
			  -e 0x5000000 -n "autoscr example script" -d test.script test.img

		c. To test on EZ-KIT board use following command
			$ mkimage -A blackfin -O uClinux -T script -C none -a 0x1500000 
			  -e 0x1500000 -n "autoscr example script" -d test.script test.img

	6. Execute following commands on the target
		BOOT> tftp 0x1000000 test.img
		BOOT> autoscr 0x1000000

	7. In case of this example the message "hi" can be seen on the screen.

U-Boot Memory MAP
-----------------

                U-Boot memory map for STAMP
                ---------------------------

                Memory Map after relocation:

                0x0000 0000     --------------------CFG_SDRAM_BASE
                      :
                      :
		0x07f1 c000     --------------------STACK END
		      :		+ U-boot stack		^
		      :					|
		      :					|
                0x07f3 bffc     --------------------STACK START
                0x07f3 c000     --------------------CFG_GLOBAL_DATA_ADDR
                      :         + U-Boot Global Data storage
                      :
                0x07f4 0000     --------------------CFG_MALLC_BASE
                      :         + U-Boot Heap
                      :
                0x07f8 0000
                      :         + U-Boot in SDRAM
                      :
                0x0800 0000     --------------------SDRAM End

                0x2000 0000     --------------------CFG_FLASH_BASE
                      :         + U-Boot in flash
                      :
                0x2007 0000
                      :         + Environment storage
                      :
                0x2007 ffff
                      :
                      :
                0x2040 0000     --------------------Flash end


		U-Boot memory map for EZKIT-533
		---------------------------

		Memory Map after relocation:

                0x0000 0000     --------------------CFG_SDRAM_BASE
                      :
                      :
		0x01f1 c000     --------------------STACK END
		      :		+ U-boot stack		^
		      :					|
		      :					|
                0x01f3 bffc     --------------------STACK START
                0x01f3 c000     --------------------CFG_GLOBAL_DATA_ADDR
                      :         + U-Boot Global Data storage
                      :
                0x01f4 0000     --------------------CFG_MALLC_BASE
                      :         + U-Boot Heap
                      :
                0x01f8 0000
                      :         + U-Boot in SDRAM 
                      :
                0x0200 0000     --------------------SDRAM End

                0x2000 0000     --------------------FLASH A Primary
                      :         + U-Boot in flash 
                      : 
                0x2004 0000         
                      :         + Environment storage
                      :
                0x2004 ffff
                      :
                      :
                0x200f ffff

Report Bugs
------------

	1. Go to the following blackfin uclinux bug tracker page,
	   http://blackfin.uclinux.org/tracker/?atid=153&group_id=20&func=browse

	2. If the bug is not already reported click on "Submit New" button to report new Bug.

--- u-boot-1.1.6/common/cmd_elf.c	2006-11-02 22:15:01.000000000 +0800
+++ u-boot-blackfin/common/cmd_elf.c	2006-12-06 18:00:11.000000000 +0800
@@ -19,6 +19,9 @@
 #include <net.h>
 #include <elf.h>
 
+#define CMD_LINE_ADDR 0xFF900000  /* L1 scratchpad */
+static char *make_command_line(void);
+
 #if defined(CONFIG_WALNUT) || defined(CFG_VXWORKS_MAC_PTR)
 DECLARE_GLOBAL_DATA_PTR;
 #endif
@@ -39,6 +42,7 @@
 {
 	unsigned long addr;		/* Address of the ELF image     */
 	unsigned long rc;		/* Return value from user code  */
+	char *cmdline;
 
 	/* -------------------------------------------------- */
 	int rcode = 0;
@@ -62,11 +66,9 @@
 	if (dcache_status ())
 		dcache_disable ();
 
-	/*
-	 * pass address parameter as argv[0] (aka command name),
-	 * and all remaining args
-	 */
-	rc = ((ulong (*)(int, char *[])) addr) (--argc, &argv[1]);
+	/* pass cmdline to the kernel. */
+	cmdline = make_command_line();
+	rc = ((ulong (*)(char *)) addr) (cmdline);
 	if (rc != 0)
 		rcode = 1;
 
@@ -74,6 +76,19 @@
 	return rcode;
 }
 
+static char *make_command_line(void)
+{
+    char *dest = (char *) CMD_LINE_ADDR;
+    char *bootargs;
+
+    if ( (bootargs = getenv("bootargs")) == NULL )
+	return NULL;
+
+    strncpy(dest, bootargs, 0x1000);
+    dest[0xfff] = 0;
+    return dest;
+}
+
 /* ======================================================================
  * Interpreter command to boot VxWorks from a memory image.  The image can
  * be either an ELF image or a raw binary.  Will attempt to setup the
@@ -265,9 +280,11 @@
 {
 	Elf32_Ehdr *ehdr;		/* Elf header structure pointer     */
 	Elf32_Shdr *shdr;		/* Section header structure pointer */
+	Elf32_Phdr *phdr;		/* Program header structure pointer */
 	unsigned char *strtab = 0;	/* String table pointer             */
 	unsigned char *image;		/* Binary image pointer             */
-	int i;				/* Loop counter                     */
+	int i, j;			/* Loop counter                     */
+	unsigned char match;
 
 	/* -------------------------------------------------- */
 
@@ -280,6 +297,17 @@
 	if (shdr->sh_type == SHT_STRTAB)
 		strtab = (unsigned char *) (addr + shdr->sh_offset);
 
+#if 0
+	printf("Number of phdr: %d, size: %d\n", ehdr->e_phnum, ehdr->e_phentsize);
+	printf("Number of shdr: %d, size: %d\n", ehdr->e_shnum, ehdr->e_shentsize);
+	
+	for (i = 0; i < ehdr->e_phnum; i++)
+	{
+		phdr = addr + ehdr->e_phoff + (i * sizeof (Elf32_Phdr));
+		printf("p_paddr: %08X, p_vaddr: %08X\n",
+			phdr->p_paddr, phdr->p_vaddr);
+	}
+#endif
 	/* Load each appropriate section */
 	for (i = 0; i < ehdr->e_shnum; ++i) {
 		shdr = (Elf32_Shdr *) (addr + ehdr->e_shoff +
@@ -302,10 +330,28 @@
 		if (shdr->sh_type == SHT_NOBITS) {
 			memset ((void *)shdr->sh_addr, 0, shdr->sh_size);
 		} else {
+			for (j = 0, match = 0; j < ehdr->e_phnum; j++) {
+				phdr = addr + ehdr->e_phoff + (j * sizeof (Elf32_Phdr));
+				if ((phdr->p_vaddr == shdr->sh_addr) && (phdr->p_paddr != phdr->p_vaddr)) {
+					printf("sh_addr: %08X, p_paddr: %08X\n",
+						shdr->sh_addr, phdr->p_paddr);
+					match = 1;
+					break;
+				} else
+					match = 0;
+			}
 			image = (unsigned char *) addr + shdr->sh_offset;
-			memcpy ((void *) shdr->sh_addr,
-				(const void *) image,
-				shdr->sh_size);
+			if (match) {
+				printf("Loading from: %08X to %08X, size: %d\n",
+					image, phdr->p_paddr, shdr->sh_size);
+				memcpy ((void *) phdr->p_paddr,
+					(const void *) image,
+					shdr->sh_size);
+			} else {
+				memcpy ((void *) shdr->sh_addr,
+					(const void *) image,
+					shdr->sh_size);
+			}
 		}
 		flush_cache (shdr->sh_addr, shdr->sh_size);
 	}
